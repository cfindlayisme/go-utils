name: Publish Go Package

on:
  push:

jobs:

  unit-test:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-go@v5
          with:
            go-version: '1.24.4'
        - name: Install dependencies for go
          run: go mod download
        - name: Unit Testing
          run: go test -v ./...
        - name: Generate coverage report
          run: go test -coverprofile=coverage.out ./...
        - name: Upload coverage report
          uses: actions/upload-artifact@v4
          with:
            name: coverage-report
            path: coverage.out

  nancy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.4
    - name: Check for Go vulnerabilities
      run: |
        go list -json -m all | docker run --rm -i sonatypecommunity/nancy:latest sleuth
    
  build-and-publish:
    if: github.ref == 'refs/heads/main'
    needs: [unit-test, nancy]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Increment version
        id: version
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "Latest tag: $latest_tag"

          # Parse the version (assumes semantic versioning)
          major=$(echo $latest_tag | cut -d. -f1 | sed 's/v//')
          minor=$(echo $latest_tag | cut -d. -f2)
          patch=$(echo $latest_tag | cut -d. -f3)

          # Increment the patch version
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "New version: $new_version"

          # Set the new version as an output
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create and push new tag (publish)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag "$new_version"

          git push origin "$new_version"